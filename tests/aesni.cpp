//
//  aesni.cpp
//  libsse_crypto
//
//  Created by Raphael Bost on 24/05/2017.
//  Copyright Â© 2017 VSSE project. All rights reserved.
//

#include "../src/aesni/aesni.hpp"

#if USE_AESNI

#pragma message "Test AES NI"



using namespace std;

#include "gtest/gtest.h"



namespace sse
{
    
    namespace crypto
    {
 
        TEST(aesni, vectors_varkey)
        {
            uint8_t plain[] = {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };

            std::vector< std::array<uint8_t, 16> > keys{
                {
                    {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                }
            };


            std::vector< std::array<uint8_t, 16> > references{
				{
	                {0x0e, 0xdd, 0x33, 0xd3, 0xc6, 0x21, 0xe5, 0x46, 0x45, 0x5b, 0xd8, 0xba, 0x14, 0x18, 0xbe, 0xc8}
	            },
	            {
	                {0x4b, 0xc3, 0xf8, 0x83, 0x45, 0x0c, 0x11, 0x3c, 0x64, 0xca, 0x42, 0xe1, 0x11, 0x2a, 0x9e, 0x87}
	            },
	            {
	                {0x72, 0xa1, 0xda, 0x77, 0x0f, 0x5d, 0x7a, 0xc4, 0xc9, 0xef, 0x94, 0xd8, 0x22, 0xaf, 0xfd, 0x97}
	            },
	            {
	                {0x97, 0x00, 0x14, 0xd6, 0x34, 0xe2, 0xb7, 0x65, 0x07, 0x77, 0xe8, 0xe8, 0x4d, 0x03, 0xcc, 0xd8}
	            },
	            {
	                {0xf1, 0x7e, 0x79, 0xae, 0xd0, 0xdb, 0x7e, 0x27, 0x9e, 0x95, 0x5b, 0x5f, 0x49, 0x38, 0x75, 0xa7}
	            },
	            {
	                {0x9e, 0xd5, 0xa7, 0x51, 0x36, 0xa9, 0x40, 0xd0, 0x96, 0x3d, 0xa3, 0x79, 0xdb, 0x4a, 0xf2, 0x6a}
	            },
	            {
	                {0xc4, 0x29, 0x5f, 0x83, 0x46, 0x5c, 0x77, 0x55, 0xe8, 0xfa, 0x36, 0x4b, 0xac, 0x6a, 0x7e, 0xa5}
	            },
	            {
	                {0xb1, 0xd7, 0x58, 0x25, 0x6b, 0x28, 0xfd, 0x85, 0x0a, 0xd4, 0x94, 0x42, 0x08, 0xcf, 0x11, 0x55}
	            },
	            {
	                {0x42, 0xff, 0xb3, 0x4c, 0x74, 0x3d, 0xe4, 0xd8, 0x8c, 0xa3, 0x80, 0x11, 0xc9, 0x90, 0x89, 0x0b}
	            },
	            {
	                {0x99, 0x58, 0xf0, 0xec, 0xea, 0x8b, 0x21, 0x72, 0xc0, 0xc1, 0x99, 0x5f, 0x91, 0x82, 0xc0, 0xf3}
				}
            };
            
            std::array<uint8_t, 16> enc_result;
            
            ASSERT_EQ(keys.size(), references.size());
            
            for (size_t i = 0; i < keys.size(); i++) {
                auto subkeys = aesni_derive_subkeys(keys[i]);

                aesni_encrypt1(plain, subkeys, enc_result.data());
                
                ASSERT_EQ(enc_result, references[i]);
            }
            
        }

        
        TEST(aesni, vectors_vartxt)
        {
            uint8_t key[] = {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };

            std::vector< std::array<uint8_t, 16> > plains{
                {
                    {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                },
                {
                    {0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
                }
            };
            
            
            std::vector< std::array<uint8_t, 16> > references{
                {
                    {0x3a, 0xd7, 0x8e, 0x72, 0x6c, 0x1e, 0xc0, 0x2b, 0x7e, 0xbf, 0xe9, 0x2b, 0x23, 0xd9, 0xec, 0x34}
                },
                {
                    {0xaa, 0xe5, 0x93, 0x9c, 0x8e, 0xfd, 0xf2, 0xf0, 0x4e, 0x60, 0xb9, 0xfe, 0x71, 0x17, 0xb2, 0xc2}
                },
                {
                    {0xf0, 0x31, 0xd4, 0xd7, 0x4f, 0x5d, 0xcb, 0xf3, 0x9d, 0xaa, 0xf8, 0xca, 0x3a, 0xf6, 0xe5, 0x27}
                },
                {
                    {0x96, 0xd9, 0xfd, 0x5c, 0xc4, 0xf0, 0x74, 0x41, 0x72, 0x7d, 0xf0, 0xf3, 0x3e, 0x40, 0x1a, 0x36}
                },
                {
                    {0x30, 0xcc, 0xdb, 0x04, 0x46, 0x46, 0xd7, 0xe1, 0xf3, 0xcc, 0xea, 0x3d, 0xca, 0x08, 0xb8, 0xc0}
                },
                {
                    {0x16, 0xae, 0x4c, 0xe5, 0x04, 0x2a, 0x67, 0xee, 0x8e, 0x17, 0x7b, 0x7c, 0x58, 0x7e, 0xcc, 0x82}
                },
                {
                    {0xb6, 0xda, 0x0b, 0xb1, 0x1a, 0x23, 0x85, 0x5d, 0x9c, 0x5c, 0xb1, 0xb4, 0xc6, 0x41, 0x2e, 0x0a}
                },
                {
                    {0xdb, 0x4f, 0x1a, 0xa5, 0x30, 0x96, 0x7d, 0x67, 0x32, 0xce, 0x47, 0x15, 0xeb, 0x0e, 0xe2, 0x4b}
                },
                {
                    {0xa8, 0x17, 0x38, 0x25, 0x26, 0x21, 0xdd, 0x18, 0x0a, 0x34, 0xf3, 0x45, 0x5b, 0x4b, 0xaa, 0x2f}
                },
                {
                    {0x77, 0xe2, 0xb5, 0x08, 0xdb, 0x7f, 0xd8, 0x92, 0x34, 0xca, 0xf7, 0x93, 0x9e, 0xe5, 0x62, 0x1a}
                }
            };
            
            ASSERT_EQ(plains.size(), references.size());
            auto subkeys = aesni_derive_subkeys(key);
            
            std::array<uint8_t, 16> enc_result;
            
            for (size_t i = 0; i < plains.size(); i++) {
                aesni_encrypt1(plains[i].data(), subkeys, enc_result.data());
                
                ASSERT_EQ(enc_result, references[i]);
            }
            
            
        }

        TEST(aesni, correctness_multblock)
        {
            uint8_t key[] = {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };
            
            std::array<uint8_t, 16*11> plains{{
                0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            }};
            
            
            std::array<uint8_t, 16*11>references{{
                0xb8, 0x49, 0x9c, 0x25, 0x1f, 0x84, 0x42, 0xee, 0x13, 0xf0, 0x93, 0x3b, 0x68, 0x8f, 0xcd, 0x19,
				0x96, 0x51, 0x35, 0xf8, 0xa8, 0x1f, 0x25, 0xc9, 0xd6, 0x30, 0xb1, 0x75, 0x02, 0xf6, 0x8e, 0x53,
				0x8b, 0x87, 0x14, 0x5a, 0x01, 0xad, 0x1c, 0x6c, 0xed, 0xe9, 0x95, 0xea, 0x36, 0x70, 0x45, 0x4f,
				0x8e, 0xae, 0x3b, 0x10, 0xa0, 0xc8, 0xca, 0x6d, 0x1d, 0x3b, 0x0f, 0xa6, 0x1e, 0x56, 0xb0, 0xb2,
				0x64, 0xb4, 0xd6, 0x29, 0x81, 0x0f, 0xda, 0x6b, 0xaf, 0xdf, 0x08, 0xf3, 0xb0, 0xd8, 0xd2, 0xc5,
				0xd7, 0xe5, 0xdb, 0xd3, 0x32, 0x45, 0x95, 0xf8, 0xfd, 0xc7, 0xd7, 0xc5, 0x71, 0xda, 0x6c, 0x2a,
				0xf3, 0xf7, 0x23, 0x75, 0x26, 0x4e, 0x16, 0x7f, 0xca, 0x9d, 0xe2, 0xc1, 0x52, 0x7d, 0x96, 0x06,
				0x8e, 0xe7, 0x9d, 0xd4, 0xf4, 0x01, 0xff, 0x9b, 0x7e, 0xa9, 0x45, 0xd8, 0x66, 0x66, 0xc1, 0x3b,
				0xdd, 0x35, 0xce, 0xa2, 0x79, 0x99, 0x40, 0xb4, 0x0d, 0xb3, 0xf8, 0x19, 0xcb, 0x94, 0xc0, 0x8b,
				0x69, 0x41, 0xcb, 0x6b, 0x3e, 0x08, 0xc2, 0xb7, 0xaf, 0xa5, 0x81, 0xeb, 0xdd, 0x60, 0x7b, 0x87,
				0x2c, 0x20, 0xf4, 0x39, 0xf6, 0xbb, 0x09, 0x7b, 0x29, 0xb8, 0xbd, 0x6d, 0x99, 0xaa, 0xd7, 0x99
            }};
            
            ASSERT_EQ(plains.size(), references.size());
            ASSERT_EQ(plains.size()%16, 0);
            auto subkeys = aesni_derive_subkeys(key);
            
            
            for (size_t i = 0; i < plains.size()/16; i++) {
                uint8_t * enc_result = new uint8_t[16*(i+1)];

                aesni_encrypt(plains.data(), i+1, subkeys, enc_result);
                
                ASSERT_EQ(std::string((char *)enc_result, 16*(i+1)), std::string(references.begin(), references.begin()+16*(i+1)));
                
                delete [] enc_result;
            }
            
            
        }

        
        TEST(aesni, ctr_consistency)
        {
            uint8_t key[] = {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };

            
            auto subkeys = aesni_derive_subkeys(key);
            
            
            for (size_t i = 0; i < 24; i++) {
                uint8_t * enc_result_derived_keys = new uint8_t[16*(i+1)];
                uint8_t * enc_result_direct_keys = new uint8_t[16*(i+1)];
                
                aesni_ctr(i+1, 0, subkeys, enc_result_derived_keys);
                aesni_ctr(i+1, 0, key, enc_result_direct_keys);
                
                ASSERT_EQ(std::string((char *)enc_result_derived_keys, 16*(i+1)),
                          std::string((char *)enc_result_direct_keys, 16*(i+1)));
                
                delete [] enc_result_derived_keys;
                delete [] enc_result_direct_keys;
            }
        }

        TEST(aesni, ctr_vectors)
        {
            // check that the strings generated using directly the ctr mode matches the ones generated via regular encryption
            uint8_t key[] = {
                0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };

            constexpr size_t n_blocks = 24;
            
            std::array<uint8_t, n_blocks*16> in= {{0x00}}; // initialized to all 0
            
            for (size_t i = 0; i < n_blocks; i++) {
                in[i*16] = i;
            }
            
            auto subkeys = aesni_derive_subkeys(key);
            
            
            for (size_t i = 0; i < n_blocks; i++) {
                uint8_t * enc_result_direct = new uint8_t[16*(i+1)];
                uint8_t * enc_result_indirect = new uint8_t[16*(i+1)];
                
                aesni_ctr(i+1, 0, subkeys, enc_result_direct);
                aesni_encrypt(in.data(), i+1, subkeys, enc_result_indirect);
                
                ASSERT_EQ(std::string((char *)enc_result_direct, 16*(i+1)),
                          std::string((char *)enc_result_indirect, 16*(i+1)));
                
                delete [] enc_result_direct;
                delete [] enc_result_indirect;
            }
            
            
            // for 8 blocks, we have to do something specific to cover everything in aesni.cpp
            uint8_t * enc_result_direct = new uint8_t[16*8];
            uint8_t * enc_result_indirect = new uint8_t[16*8];
            
            aesni_ctr8(0, key, enc_result_direct);
            aesni_encrypt(in.data(), 8, subkeys, enc_result_indirect);
            
            ASSERT_EQ(std::string((char *)enc_result_direct, 16*8),
                      std::string((char *)enc_result_indirect, 16*8));
            
            delete [] enc_result_direct;
            delete [] enc_result_indirect;

        }

        TEST(aesni, ctr_shift)
        {
            // check that the strings generated using the ctr mode are consistent over shifts
            uint8_t key[] = {
                0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };
            
            constexpr size_t n_blocks = 24;
            constexpr size_t shift = 10;
            
            auto subkeys = aesni_derive_subkeys(key);
            uint8_t * reference = new uint8_t[16*(n_blocks+shift)];
            aesni_ctr(n_blocks+shift, 0, subkeys, reference);

            
            for (size_t i = 0; i < n_blocks; i++) {
                for (size_t j = 0; j < shift; j++) {
                    uint8_t * enc_result = new uint8_t[16*(i+1)];
                    
                    aesni_ctr(i+1, j, subkeys, enc_result);
                    
                    ASSERT_EQ(std::string((char *)enc_result, 16*(i+1)),
                              std::string((char *)reference+(16*j), 16*(i+1)));
                    
                    delete [] enc_result;
                }
            }
            
            delete [] reference;

        }
        
        
    }
}



# endif
